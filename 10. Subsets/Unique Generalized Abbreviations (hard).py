# Given a word, write a function to generate all of its unique generalized abbreviations.
#
# A generalized abbreviation of a word can be generated by replacing each substring of the word
# with the count of characters in the substring.
#
# Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”.
# After replacing these substrings in the actual word by the count of characters, we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”.
#
# Note: All contiguous characters should be considered one substring,
# e.g., we can’t take “a” and “b” as substrings to get “11”; since “a” and “b” are contiguous,
# we should consider them together as one substring to get an abbreviation “2”.
#
# Example 1:
#
# Input: "BAT"
# Output: "BAT", "BA1", "B1T", "B2", "1AT", "1A1", "2T", "3"
# Example 2:
#
# Input: "code"
# Output: "code", "cod1", "co1e", "co2", "c1de", "c1d1", "c2e", "c3", "1ode", "1od1", "1o1e", "1o2",
# "2de", "2d1", "3e", "4"

from collections import deque


class AbbreviatedWord:

    def __init__(self, str, start,  count):
        self.str = str
        self.start = start
        self.count = count


def generate_generalized_abbreviation(word):
    wordLen = len(word)
    result = []
    queue = deque()
    queue.append(AbbreviatedWord(list(), 0, 0))

    while queue:
        abWord = queue.popleft()
        print('- pop up ', abWord.str)
        if abWord.start == wordLen:

            if abWord.count != 0:
                abWord.str.append(str(abWord.count))
                print(' ', list(abWord.str), ', count:', abWord.count)
            print('add result: ', list(abWord.str), ', count:', abWord.count)
            print('\n')
            result.append(''.join(abWord.str))
        else:
            print('adding ', list(abWord.str), ', start index:', abWord.start + 1 , ', count:', abWord.count + 1)
            # continue abbreviating by incrementing the current abbreviation count
            queue.append(AbbreviatedWord(list(abWord.str),
                                       abWord.start + 1, abWord.count + 1))

            print([x.str for x in queue])

            # restart abbreviating, append the count and the current character to the string
            if abWord.count != 0:
                abWord.str.append(str(abWord.count))
                print(' ', list(abWord.str), ', count:', abWord.count)

            newWord = list(abWord.str)
            print('new word: ', newWord)
            newWord.append(word[abWord.start])
            print('after append: ', newWord)
            print('adding ', newWord, ', start index:', abWord.start + 1, ', count:', 0)
            queue.append(AbbreviatedWord(newWord, abWord.start + 1, 0))
            print([x.str for x in queue])
            print('\n')

    return result

def generate_generalized_abbreviation_2(word):
    result = []
    generate_abbreviation_recursive(word, list(), 0, 0, result)
    return result


def generate_abbreviation_recursive(word, abWord, start, count, result):
    if start == len(word):
        if count != 0:
            abWord.append(str(count))
        result.append(''.join(abWord))
    else:
        # continue abbreviating by incrementing the current abbreviation count
        generate_abbreviation_recursive(
          word, list(abWord), start + 1, count + 1, result)

        # restart abbreviating, append the count and the current character to the string
        if count != 0:
            abWord.append(str(count))
        newWord = list(abWord)
        newWord.append(word[start])
        generate_abbreviation_recursive(word, newWord, start + 1, 0, result)

def main():
    print("Generalized abbreviation are: " +
        str(generate_generalized_abbreviation("BAT")))
    # print("Generalized abbreviation are: " +
    #     str(generate_generalized_abbreviation("code")))
    # print("Generalized abbreviation are: " +
    #       str(generate_generalized_abbreviation_2("BAT")))
    # print("Generalized abbreviation are: " +
    #       str(generate_generalized_abbreviation_2("code")))


main()

